"""
Module x·ª≠ l√Ω logic VPN c·ªët l√µi.
ƒê·ªôc l·∫≠p v·ªõi CLI interface, c√≥ th·ªÉ t√°i s·ª≠ d·ª•ng.
"""

import os
import json
import subprocess
import time
import requests
from typing import List, Dict, Optional
import logging

logger = logging.getLogger(__name__)


# === C·∫§U H√åNH ===
PROTONVPN_API = "https://api.protonvpn.ch/vpn/logicals"
# VPN Gate API - Ch·ªâ tr·∫£ v·ªÅ top 100 servers t·ªët nh·∫•t (ƒë·ªÉ tr√°nh DoS)
# Danh s√°ch qu·ªëc gia thay ƒë·ªïi theo th·ªùi gian t√πy v√†o servers n√†o online
FREEVPN_API = "https://www.vpngate.net/api/iphone/"
CONFIG_EXTENSION = ".ovpn"


class VPNCore:
    """Class qu·∫£n l√Ω k·∫øt n·ªëi VPN."""
    
    def __init__(self, config_dir: str = "vpn_configs"):
        """
        Kh·ªüi t·∫°o VPN Core.
        
        Args:
            config_dir: Th∆∞ m·ª•c l∆∞u config files
        """
        self.config_dir = config_dir
        self.current_process = None
        self.pid_file = os.path.join(config_dir, 'vpn.pid')
        self._ensure_config_dir()
    
    def _ensure_config_dir(self):
        """T·∫°o th∆∞ m·ª•c config n·∫øu ch∆∞a c√≥."""
        if not os.path.exists(self.config_dir):
            os.makedirs(self.config_dir)
            logger.info(f"ƒê√£ t·∫°o th∆∞ m·ª•c config: {self.config_dir}")
    
    def fetch_vpngate_servers(self) -> List[Dict]:
        """
        L·∫•y danh s√°ch VPN servers mi·ªÖn ph√≠ t·ª´ VPN Gate.
        VPN Gate l√† d·ªãch v·ª• ho√†n to√†n mi·ªÖn ph√≠, kh√¥ng c·∫ßn ƒëƒÉng k√Ω.
        
        Returns:
            List c√°c server info d·∫°ng dict
            
        Raises:
            Exception: N·∫øu kh√¥ng th·ªÉ fetch ƒë∆∞·ª£c servers
        """
        try:
            logger.info("ƒêang t·∫£i danh s√°ch servers t·ª´ VPN Gate...")
            # Bypass proxy ƒë·ªÉ tr√°nh l·ªói connection
            response = requests.get(FREEVPN_API, timeout=10, proxies={'http': None, 'https': None})
            response.raise_for_status()
            
            # Parse CSV response (skip header)
            lines = response.text.strip().split('\n')
            servers = []

            # Skip first 2 lines (headers) and last line (*END)
            for line in lines[2:-1]:
                parts = line.split(',')
                # Fix: CSV format c√≥ th·ªÉ c√≥ d·∫•u ph·∫©y trong Message field
                # C·∫ßn √≠t nh·∫•t 15 parts, nh∆∞ng config_data c√≥ th·ªÉ b·ªã split th√†nh nhi·ªÅu parts
                if len(parts) >= 15:
                    # Join t·∫•t c·∫£ parts t·ª´ index 14 tr·ªü ƒëi l√†m config_data
                    # V√¨ Base64 config c√≥ th·ªÉ ch·ª©a d·∫•u ph·∫©y ho·∫∑c b·ªã split
                    config_data = ','.join(parts[14:]) if len(parts) > 14 else parts[14]

                    servers.append({
                        'hostname': parts[0],
                        'ip': parts[1],
                        'country': parts[5],
                        'country_code': parts[6],
                        'speed': int(parts[4]) if parts[4].isdigit() else 0,
                        'uptime': int(parts[10]) if parts[10].isdigit() else 0,
                        'score': int(parts[2]) if parts[2].isdigit() else 0,
                        'config_data': config_data  # Base64 encoded .ovpn (joined)
                    })

            # S·∫Øp x·∫øp theo t·ªëc ƒë·ªô v√† uptime
            servers.sort(key=lambda x: (x['speed'], x['uptime']), reverse=True)
            
            logger.info(f"‚úÖ T√¨m th·∫•y {len(servers)} servers kh·∫£ d·ª•ng")
            return servers
            
        except Exception as e:
            logger.error(f"L·ªói khi fetch servers: {e}")
            raise
    
    def list_countries(self) -> Dict[str, List[Dict]]:
        """
        L·∫•y danh s√°ch qu·ªëc gia c√≥ VPN servers.
        
        Returns:
            Dict v·ªõi key l√† country code, value l√† list servers
        """
        servers = self.fetch_vpngate_servers()
        
        countries = {}
        for server in servers:
            country = server['country_code']
            if country not in countries:
                countries[country] = []
            countries[country].append(server)
        
        return countries
    
    def download_config(self, country_code: str) -> Optional[str]:
        """
        T·∫£i config file cho qu·ªëc gia ch·ªâ ƒë·ªãnh.
        Ch·ªçn server t·ªët nh·∫•t (nhanh nh·∫•t, uptime cao).
        
        Args:
            country_code: M√£ qu·ªëc gia (VD: US, JP, UK)
            
        Returns:
            ƒê∆∞·ªùng d·∫´n file config ƒë√£ t·∫£i, ho·∫∑c None n·∫øu th·∫•t b·∫°i
        """
        try:
            countries = self.list_countries()
            country_code = country_code.upper()
            
            if country_code not in countries:
                logger.error(f"Kh√¥ng t√¨m th·∫•y servers cho qu·ªëc gia: {country_code}")
                available = ', '.join(sorted(countries.keys()))
                logger.info(f"üìç C√°c qu·ªëc gia kh·∫£ d·ª•ng hi·ªán t·∫°i ({len(countries)}): {available}")
                logger.info("üí° L∆∞u √Ω: VPN Gate API ch·ªâ tr·∫£ v·ªÅ top 100 servers t·ªët nh·∫•t.")
                logger.info("   Danh s√°ch qu·ªëc gia thay ƒë·ªïi theo th·ªùi gian t√πy servers n√†o online.")
                logger.info("   Th·ª≠ l·∫°i sau ho·∫∑c ch·ªçn qu·ªëc gia kh√°c.")
                return None
            
            # Ch·ªçn server t·ªët nh·∫•t
            server = countries[country_code][0]
            logger.info(f"Ch·ªçn server: {server['hostname']} ({server['country']})")
            logger.info(f"Speed: {server['speed']/1000000:.1f} Mbps, Uptime: {server['uptime']} ms")
            
            # Decode config data (base64)
            import base64
            config_data = base64.b64decode(server['config_data']).decode('utf-8')
            
            # L∆∞u file config
            config_filename = f"{country_code}_{server['hostname']}{CONFIG_EXTENSION}"
            config_path = os.path.join(self.config_dir, config_filename)
            
            with open(config_path, 'w', encoding='utf-8') as f:
                f.write(config_data)
            
            logger.info(f"‚úÖ ƒê√£ t·∫£i config: {config_path}")
            return config_path
            
        except Exception as e:
            logger.error(f"L·ªói khi t·∫£i config: {e}")
            return None
    
    def connect(self, config_path: str, require_admin: bool = False) -> bool:
        """
        K·∫øt n·ªëi VPN s·ª≠ d·ª•ng config file.

        Args:
            config_path: ƒê∆∞·ªùng d·∫´n file .ovpn
            require_admin: C√≥ y√™u c·∫ßu quy·ªÅn admin kh√¥ng

        Returns:
            True n·∫øu th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        if not os.path.exists(config_path):
            logger.error(f"File config kh√¥ng t·ªìn t·∫°i: {config_path}")
            return False

        try:
            # Fix: Disconnect k·∫øt n·ªëi c≈© tr∆∞·ªõc khi connect m·ªõi
            # Nguy√™n nh√¢n: N·∫øu c√≥ connection c≈© ƒëang ch·∫°y (d√π failed), n√≥ s·∫Ω conflict v·ªõi connection m·ªõi
            if self.is_connected() or self._has_openvpn_process():
                logger.info("ƒêang ng·∫Øt k·∫øt n·ªëi VPN c≈©...")
                self.disconnect()
                time.sleep(2)  # ƒê·ª£i process c≈© terminate ho√†n to√†n

            # Ki·ªÉm tra OpenVPN c√≥ ƒë∆∞·ª£c c√†i ƒë·∫∑t
            openvpn_cmd = self._find_openvpn()
            if not openvpn_cmd:
                logger.error("‚ùå OpenVPN ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t!")
                logger.info("Vui l√≤ng c√†i ƒë·∫∑t OpenVPN: https://openvpn.net/community-downloads/")
                return False

            logger.info(f"ƒêang k·∫øt n·ªëi VPN: {config_path}")

            # T·∫°o l·ªánh k·∫øt n·ªëi v·ªõi cipher compatibility
            # Fix: Th√™m --data-ciphers ƒë·ªÉ h·ªó tr·ª£ c·∫£ legacy (AES-128-CBC) v√† modern ciphers
            # Nguy√™n nh√¢n: VPN Gate servers c≈© d√πng AES-128-CBC, OpenVPN 2.6+ m·∫∑c ƒë·ªãnh ch·ªâ d√πng modern ciphers
            cmd = [
                openvpn_cmd,
                '--config', config_path,
                '--data-ciphers', 'AES-128-CBC:AES-256-CBC:AES-256-GCM:AES-128-GCM:CHACHA20-POLY1305',
                '--cipher', 'AES-128-CBC'  # Fallback cipher cho compatibility
            ]

            if require_admin:
                logger.warning("‚ö†Ô∏è  C·∫ßn quy·ªÅn Administrator ƒë·ªÉ k·∫øt n·ªëi VPN")

            # T·∫°o log file ƒë·ªÉ capture OpenVPN output
            self.log_file_path = os.path.join(self.config_dir, 'openvpn_connect.log')
            log_file = open(self.log_file_path, 'w')

            logger.info(f"üìù OpenVPN log: {self.log_file_path}")

            # Ch·∫°y OpenVPN process ·∫©n (kh√¥ng hi·ªán console)
            # Tr√™n Windows: CREATE_NO_WINDOW ƒë·ªÉ ch·∫°y ng·∫ßm
            if os.name == 'nt':  # Windows
                # CREATE_NO_WINDOW = 0x08000000 - Ch·∫°y process kh√¥ng hi·ªán c·ª≠a s·ªï
                CREATE_NO_WINDOW = 0x08000000
                self.current_process = subprocess.Popen(
                    cmd,
                    creationflags=subprocess.CREATE_NEW_PROCESS_GROUP | CREATE_NO_WINDOW,
                    stdout=log_file,
                    stderr=subprocess.STDOUT  # Redirect stderr to stdout (log file)
                )
            else:  # Linux/Mac
                self.current_process = subprocess.Popen(
                    cmd,
                    stdout=log_file,
                    stderr=subprocess.STDOUT,
                    start_new_session=True
                )

            # L∆∞u PID ƒë·ªÉ qu·∫£n l√Ω sau
            with open(self.pid_file, 'w') as f:
                f.write(str(self.current_process.pid))

            logger.info(f"ƒê√£ kh·ªüi ƒë·ªông OpenVPN process (PID: {self.current_process.pid})")

            # ƒê·ª£i v√† verify k·∫øt n·ªëi th·ª±c s·ª± th√†nh c√¥ng
            logger.info("ƒêang ch·ªù OpenVPN k·∫øt n·ªëi...")
            for i in range(30):  # TƒÉng timeout l√™n 30 gi√¢y ƒë·ªÉ ƒë·ªß th·ªùi gian k·∫øt n·ªëi
                time.sleep(1)

                # Ki·ªÉm tra process c√≤n ch·∫°y kh√¥ng
                if self.current_process.poll() is not None:
                    logger.error("OpenVPN process ƒë√£ d·ª´ng. Ki·ªÉm tra log ƒë·ªÉ bi·∫øt chi ti·∫øt.")
                    self._show_connection_error()
                    return False

                # Verify connection th·ª±c s·ª± th√†nh c√¥ng b·∫±ng c√°ch parse log
                if self._verify_connection_from_log():
                    logger.info("‚úÖ ƒê√£ k·∫øt n·ªëi VPN th√†nh c√¥ng!")
                    return True

            # Timeout nh∆∞ng process v·∫´n ch·∫°y - c√≥ th·ªÉ ƒëang k·∫øt n·ªëi
            logger.warning("‚ö†Ô∏è  Timeout ch·ªù k·∫øt n·ªëi. Ki·ªÉm tra log ƒë·ªÉ bi·∫øt chi ti·∫øt.")
            self._show_connection_error()
            return False
                
        except Exception as e:
            logger.error(f"L·ªói khi k·∫øt n·ªëi: {e}")
            return False
    
    def disconnect(self) -> bool:
        """
        Ng·∫Øt k·∫øt n·ªëi VPN hi·ªán t·∫°i.
        
        Returns:
            True n·∫øu th√†nh c√¥ng
        """
        try:
            # ƒê·ªçc PID t·ª´ file n·∫øu c√≥
            if os.path.exists(self.pid_file):
                try:
                    with open(self.pid_file, 'r') as f:
                        pid = int(f.read().strip())
                    
                    import psutil
                    if psutil.pid_exists(pid):
                        proc = psutil.Process(pid)
                        proc.terminate()
                        proc.wait(timeout=5)
                        logger.info(f"‚úÖ ƒê√£ ng·∫Øt OpenVPN process (PID: {pid})")
                    
                    os.remove(self.pid_file)
                except Exception as e:
                    logger.warning(f"Kh√¥ng th·ªÉ kill process t·ª´ PID file: {e}")
            
            # Fallback: kill t·∫•t c·∫£ OpenVPN processes
            killed = self._kill_openvpn_processes()
            if killed:
                logger.info(f"‚úÖ ƒê√£ ng·∫Øt {killed} k·∫øt n·ªëi VPN")
            else:
                logger.info("‚ÑπÔ∏è  Kh√¥ng c√≥ k·∫øt n·ªëi VPN n√†o ƒëang ho·∫°t ƒë·ªông")
            
            self.current_process = None
            return True
                    
        except Exception as e:
            logger.error(f"L·ªói khi ng·∫Øt k·∫øt n·ªëi: {e}")
            return False
    
    def is_connected(self) -> bool:
        """
        Ki·ªÉm tra VPN c√≥ ƒëang k·∫øt n·ªëi TH·ª∞C S·ª∞ kh√¥ng.

        Fix: Kh√¥ng ch·ªâ check process running, m√† verify connection th·ª±c s·ª± established
        b·∫±ng c√°ch parse OpenVPN log t√¨m "Initialization Sequence Completed"

        Returns:
            True n·∫øu ƒëang k·∫øt n·ªëi TH·ª∞C S·ª∞
        """
        # Ki·ªÉm tra process c√≤n ch·∫°y
        process_running = False
        if self.current_process and self.current_process.poll() is None:
            process_running = True
        else:
            # Ki·ªÉm tra c√≥ OpenVPN process n√†o ƒëang ch·∫°y
            import psutil
            for proc in psutil.process_iter(['name']):
                try:
                    if 'openvpn' in proc.info['name'].lower():
                        process_running = True
                        break
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    pass

        # N·∫øu process kh√¥ng ch·∫°y, ch·∫Øc ch·∫Øn kh√¥ng connected
        if not process_running:
            return False

        # Process ƒëang ch·∫°y - verify connection th·ª±c s·ª± th√†nh c√¥ng t·ª´ log
        return self._verify_connection_from_log()
    
    def get_status(self) -> Dict:
        """
        L·∫•y tr·∫°ng th√°i k·∫øt n·ªëi VPN chi ti·∫øt.
        
        Returns:
            Dict ch·ª©a th√¥ng tin status
        """
        connected = self.is_connected()
        
        status = {
            'connected': connected,
            'process_running': self.current_process is not None,
            'ip_address': self._get_public_ip() if connected else None
        }
        
        return status
    
    def _find_openvpn(self) -> Optional[str]:
        """
        T√¨m OpenVPN executable.
        
        Returns:
            ƒê∆∞·ªùng d·∫´n ƒë·∫øn openvpn.exe ho·∫∑c None
        """
        # C√°c v·ªã tr√≠ th∆∞·ªùng g·∫∑p tr√™n Windows
        possible_paths = [
            r"C:\Program Files\OpenVPN\bin\openvpn.exe",
            r"C:\Program Files (x86)\OpenVPN\bin\openvpn.exe",
            "openvpn"  # Trong PATH
        ]
        
        for path in possible_paths:
            try:
                result = subprocess.run(
                    [path, '--version'],
                    capture_output=True,
                    timeout=2
                )
                if result.returncode == 0:
                    return path
            except:
                continue
        
        return None
    
    def _has_openvpn_process(self) -> bool:
        """
        Ki·ªÉm tra c√≥ OpenVPN process n√†o ƒëang ch·∫°y kh√¥ng.

        Returns:
            True n·∫øu c√≥ process OpenVPN ƒëang ch·∫°y
        """
        import psutil
        for proc in psutil.process_iter(['name']):
            try:
                if 'openvpn' in proc.info['name'].lower():
                    return True
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                pass
        return False

    def _kill_openvpn_processes(self) -> int:
        """
        Kill t·∫•t c·∫£ OpenVPN processes.

        Returns:
            S·ªë process ƒë√£ kill
        """
        import psutil
        killed = 0

        for proc in psutil.process_iter(['name', 'pid']):
            try:
                if 'openvpn' in proc.info['name'].lower():
                    proc.terminate()
                    killed += 1
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                pass

        return killed
    
    def _get_public_ip(self) -> Optional[str]:
        """
        L·∫•y ƒë·ªãa ch·ªâ IP c√¥ng khai hi·ªán t·∫°i.

        Returns:
            IP address ho·∫∑c None
        """
        try:
            response = requests.get('https://api.ipify.org?format=json', timeout=5, proxies={'http': None, 'https': None})
            return response.json().get('ip')
        except:
            return None

    def _verify_connection_from_log(self) -> bool:
        """
        Verify k·∫øt n·ªëi VPN th·ª±c s·ª± th√†nh c√¥ng b·∫±ng c√°ch parse OpenVPN log.

        Returns:
            True n·∫øu connection established, False n·∫øu ch∆∞a ho·∫∑c c√≥ l·ªói
        """
        if not hasattr(self, 'log_file_path') or not os.path.exists(self.log_file_path):
            return False

        try:
            with open(self.log_file_path, 'r', encoding='utf-8', errors='ignore') as f:
                log_content = f.read()

            # Check for successful connection indicators
            # "Initialization Sequence Completed" l√† d·∫•u hi·ªáu VPN ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng
            if 'Initialization Sequence Completed' in log_content:
                return True

            # Check for fatal errors
            if 'OPTIONS ERROR' in log_content or 'Failed to open tun/tap interface' in log_content:
                return False

            return False

        except Exception as e:
            logger.debug(f"Kh√¥ng th·ªÉ ƒë·ªçc log file: {e}")
            return False

    def _show_connection_error(self):
        """
        Hi·ªÉn th·ªã l·ªói k·∫øt n·ªëi t·ª´ OpenVPN log.
        """
        if not hasattr(self, 'log_file_path') or not os.path.exists(self.log_file_path):
            return

        try:
            with open(self.log_file_path, 'r', encoding='utf-8', errors='ignore') as f:
                log_content = f.read()

            # T√¨m c√°c error messages quan tr·ªçng
            error_lines = []
            for line in log_content.split('\n'):
                if any(keyword in line for keyword in ['ERROR', 'FATAL', 'Failed', 'Cannot']):
                    error_lines.append(line.strip())

            if error_lines:
                logger.error("‚ùå L·ªói k·∫øt n·ªëi VPN:")
                for error in error_lines[-5:]:  # Hi·ªÉn th·ªã 5 l·ªói g·∫ßn nh·∫•t
                    logger.error(f"   {error}")
                logger.info(f"\nüìù Xem chi ti·∫øt t·∫°i: {self.log_file_path}")

        except Exception as e:
            logger.debug(f"Kh√¥ng th·ªÉ ƒë·ªçc log file: {e}")
