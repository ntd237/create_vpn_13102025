"""
VPN Connection Tool - CLI Interface
C√¥ng c·ª• k·∫øt n·ªëi VPN mi·ªÖn ph√≠, ƒë∆°n gi·∫£n.
"""

import argparse
import sys
import time
import logging
from typing import Optional

from core import VPNCore
from utils import (
    load_config, 
    setup_logging, 
    validate_country_code,
    format_server_info,
    check_admin_rights,
    print_banner
)


# === C·∫§U H√åNH TO√ÄN C·ª§C ===
CONFIG_FILE = "config.yaml"
VERSION = "1.0.0"


def parse_arguments():
    """
    Ph√¢n t√≠ch tham s·ªë d√≤ng l·ªánh.
    
    Returns:
        Namespace ch·ª©a c√°c arguments
    """
    parser = argparse.ArgumentParser(
        description='VPN Connection Tool - Free VPN connection made easy',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='''
Usage examples:
  %(prog)s list                    # List all available VPN countries
  %(prog)s connect US              # Connect VPN to USA
  %(prog)s connect JP --admin      # Connect to Japan with admin rights
  %(prog)s status                  # Check connection status
  %(prog)s disconnect              # Disconnect VPN
  %(prog)s auto-reconnect US       # Auto reconnect when disconnected
        '''
    )
    
    parser.add_argument(
        'command',
        choices=['list', 'connect', 'disconnect', 'status', 'auto-reconnect'],
        help='Command to execute'
    )
    
    parser.add_argument(
        'country',
        nargs='?',
        help='Country code (e.g.: US, JP, UK, KR, SG)'
    )
    
    parser.add_argument(
        '--admin',
        action='store_true',
        help='Run with Administrator privileges (Windows)'
    )
    
    parser.add_argument(
        '-v', '--verbose',
        action='store_true',
        help='Show detailed output'
    )
    
    parser.add_argument(
        '--version',
        action='version',
        version=f'%(prog)s {VERSION}'
    )
    
    return parser.parse_args()


def list_countries(vpn_core: VPNCore):
    """
    Li·ªát k√™ t·∫•t c·∫£ qu·ªëc gia c√≥ VPN servers.
    
    Args:
        vpn_core: Instance c·ªßa VPNCore
    """
    try:
        print("\nüåç ƒêang t·∫£i danh s√°ch servers...\n")
        countries = vpn_core.list_countries()
        
        print(f"üìã T√¨m th·∫•y {len(countries)} qu·ªëc gia:\n")
        
        # S·∫Øp x·∫øp theo t√™n qu·ªëc gia
        sorted_countries = sorted(
            countries.items(),
            key=lambda x: x[1][0]['country']
        )
        
        for country_code, servers in sorted_countries:
            best_server = servers[0]  # Server t·ªët nh·∫•t
            print(f"  ‚Ä¢ {best_server['country']:20} ({country_code})  "
                  f"- {len(servers)} server(s) - "
                  f"Speed: {best_server['speed']/1000000:.1f} Mbps")
        
        print(f"\nüí° S·ª≠ d·ª•ng: vpn_tool.py connect <M√É_QU·ªêC_GIA>\n")
        
    except Exception as e:
        logging.error(f"L·ªói khi li·ªát k√™ servers: {e}")
        sys.exit(1)


def connect_vpn(vpn_core: VPNCore, country_code: str, require_admin: bool = False):
    """
    K·∫øt n·ªëi VPN ƒë·∫øn qu·ªëc gia ch·ªâ ƒë·ªãnh.
    
    Args:
        vpn_core: Instance c·ªßa VPNCore
        country_code: M√£ qu·ªëc gia
        require_admin: C√≥ y√™u c·∫ßu quy·ªÅn admin kh√¥ng
    """
    # Validate m√£ qu·ªëc gia
    if not validate_country_code(country_code):
        logging.error(f"‚ùå M√£ qu·ªëc gia kh√¥ng h·ª£p l·ªá: {country_code}")
        logging.info("M√£ qu·ªëc gia ph·∫£i l√† 2 k√Ω t·ª± ch·ªØ (VD: US, JP, UK)")
        sys.exit(1)
    
    # Ki·ªÉm tra quy·ªÅn admin n·∫øu c·∫ßn
    if require_admin and not check_admin_rights():
        logging.warning("‚ö†Ô∏è  Tool kh√¥ng ch·∫°y v·ªõi quy·ªÅn Administrator!")
        logging.info("Th·ª≠ k·∫øt n·ªëi b√¨nh th∆∞·ªùng tr∆∞·ªõc...")
    
    try:
        # T·∫£i config
        print(f"\nüîç T√¨m ki·∫øm VPN server t·ªët nh·∫•t cho {country_code.upper()}...\n")
        config_path = vpn_core.download_config(country_code)
        
        if not config_path:
            logging.error(f"‚ùå Kh√¥ng th·ªÉ t·∫£i config cho {country_code.upper()}")
            logging.info("\nüí° Xem danh s√°ch qu·ªëc gia: vpn_tool.py list")
            sys.exit(1)
        
        # K·∫øt n·ªëi
        print(f"\nüîå ƒêang k·∫øt n·ªëi VPN...\n")
        success = vpn_core.connect(config_path, require_admin)
        
        if success:
            print("\n" + "="*50)
            print("‚úÖ OpenVPN ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông th√†nh c√¥ng!")
            print("="*50)
            print("\nüìå L∆ØU √ù QUAN TR·ªåNG:")
            print("   ‚Ä¢ OpenVPN ƒëang ch·∫°y trong background (process ƒë·ªôc l·∫≠p)")
            print("   ‚Ä¢ B·∫°n c√≥ th·ªÉ ƒë√≥ng c·ª≠a s·ªï n√†y, VPN v·∫´n ho·∫°t ƒë·ªông")
            print("   ‚Ä¢ C·ª≠a s·ªï OpenVPN console s·∫Ω m·ªü ri√™ng (c√≥ th·ªÉ minimize)")
            print("\nüí° L·ªÜNH H·ªÆU √çCH:")
            print("   ‚Ä¢ Ki·ªÉm tra: python vpn_tool.py status")
            print("   ‚Ä¢ Ng·∫Øt k·∫øt n·ªëi: python vpn_tool.py disconnect")
            print("\n‚è≥ ƒê·ª£i kho·∫£ng 10-30 gi√¢y ƒë·ªÉ VPN k·∫øt n·ªëi ho√†n t·∫•t.")
            print("   Sau ƒë√≥ ch·∫°y 'status' ƒë·ªÉ x√°c nh·∫≠n.\n")
        else:
            logging.error("\n‚ùå K·∫øt n·ªëi VPN th·∫•t b·∫°i!")
            if not require_admin:
                logging.info("üí° Th·ª≠ l·∫°i v·ªõi quy·ªÅn admin: vpn_tool.py connect {} --admin".format(country_code))
            sys.exit(1)
            
    except Exception as e:
        logging.error(f"L·ªói khi k·∫øt n·ªëi: {e}")
        sys.exit(1)


def disconnect_vpn(vpn_core: VPNCore):
    """
    Ng·∫Øt k·∫øt n·ªëi VPN.
    
    Args:
        vpn_core: Instance c·ªßa VPNCore
    """
    try:
        print("\nüîå ƒêang ng·∫Øt k·∫øt n·ªëi VPN...\n")
        success = vpn_core.disconnect()
        
        if success:
            print("‚úÖ ƒê√£ ng·∫Øt k·∫øt n·ªëi VPN!\n")
        else:
            logging.error("‚ùå Kh√¥ng th·ªÉ ng·∫Øt k·∫øt n·ªëi")
            sys.exit(1)
            
    except Exception as e:
        logging.error(f"L·ªói khi ng·∫Øt k·∫øt n·ªëi: {e}")
        sys.exit(1)


def check_status(vpn_core: VPNCore):
    """
    Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi VPN.
    
    Args:
        vpn_core: Instance c·ªßa VPNCore
    """
    try:
        status = vpn_core.get_status()
        
        print("\nüìä TR·∫†NG TH√ÅI K·∫æT N·ªêI VPN\n")
        print("=" * 40)
        
        if status['connected']:
            print("üü¢ Tr·∫°ng th√°i: ƒêANG K·∫æT N·ªêI")
            if status['ip_address']:
                print(f"üåê IP c√¥ng khai: {status['ip_address']}")
        else:
            print("üî¥ Tr·∫°ng th√°i: CH∆ØA K·∫æT N·ªêI")
        
        print("=" * 40)
        print()
        
    except Exception as e:
        logging.error(f"L·ªói khi ki·ªÉm tra status: {e}")
        sys.exit(1)


def auto_reconnect(vpn_core: VPNCore, country_code: str, interval: int = 10):
    """
    T·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i khi m·∫•t k·∫øt n·ªëi.
    
    Args:
        vpn_core: Instance c·ªßa VPNCore
        country_code: M√£ qu·ªëc gia
        interval: Kho·∫£ng th·ªùi gian ki·ªÉm tra (gi√¢y)
    """
    print(f"\nüîÑ Ch·∫ø ƒë·ªô t·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i ƒë√£ B·∫¨T")
    print(f"   Qu·ªëc gia: {country_code.upper()}")
    print(f"   Ki·ªÉm tra m·ªói: {interval}s")
    print("   Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng\n")
    
    # K·∫øt n·ªëi l·∫ßn ƒë·∫ßu
    connect_vpn(vpn_core, country_code)
    
    try:
        while True:
            time.sleep(interval)
            
            if not vpn_core.is_connected():
                logging.warning("‚ö†Ô∏è  M·∫•t k·∫øt n·ªëi! ƒêang k·∫øt n·ªëi l·∫°i...")
                connect_vpn(vpn_core, country_code)
            else:
                logging.info("‚úÖ VPN v·∫´n ƒëang k·∫øt n·ªëi")
                
    except KeyboardInterrupt:
        print("\n\nüõë D·ª´ng auto-reconnect")
        disconnect_vpn(vpn_core)


def main():
    """Entry point ch√≠nh c·ªßa c√¥ng c·ª•."""
    try:
        # Print banner
        print_banner()
        
        # Parse arguments
        args = parse_arguments()
        
        # Load config
        try:
            config = load_config(CONFIG_FILE)
        except FileNotFoundError:
            logging.warning(f"‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y {CONFIG_FILE}, s·ª≠ d·ª•ng config m·∫∑c ƒë·ªãnh")
            config = {}
        
        # Setup logging
        logger = setup_logging(config)
        
        if args.verbose:
            logger.setLevel(logging.DEBUG)
        
        # Kh·ªüi t·∫°o VPN Core
        config_dir = config.get('paths', {}).get('config_dir', 'vpn_configs')
        vpn_core = VPNCore(config_dir=config_dir)
        
        # X·ª≠ l√Ω commands
        if args.command == 'list':
            list_countries(vpn_core)
            
        elif args.command == 'connect':
            if not args.country:
                logging.error("‚ùå Thi·∫øu m√£ qu·ªëc gia!")
                logging.info("üí° S·ª≠ d·ª•ng: vpn_tool.py connect <M√É_QU·ªêC_GIA>")
                logging.info("üí° Xem danh s√°ch: vpn_tool.py list")
                sys.exit(1)
            
            connect_vpn(vpn_core, args.country, args.admin)
            
        elif args.command == 'disconnect':
            disconnect_vpn(vpn_core)
            
        elif args.command == 'status':
            check_status(vpn_core)
            
        elif args.command == 'auto-reconnect':
            if not args.country:
                logging.error("‚ùå Thi·∫øu m√£ qu·ªëc gia!")
                logging.info("üí° S·ª≠ d·ª•ng: vpn_tool.py auto-reconnect <M√É_QU·ªêC_GIA>")
                sys.exit(1)
            
            reconnect_interval = config.get('connection', {}).get('reconnect_interval', 10)
            auto_reconnect(vpn_core, args.country, reconnect_interval)
        
        return 0
        
    except KeyboardInterrupt:
        print("\n\nüëã ƒê√£ h·ªßy b·ªüi ng∆∞·ªùi d√πng")
        return 0
        
    except Exception as e:
        logging.error(f"‚ùå L·ªói kh√¥ng mong ƒë·ª£i: {e}")
        return 1


if __name__ == '__main__':
    sys.exit(main())
