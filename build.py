"""
Script t·ª± ƒë·ªông build VPN Connection Tool th√†nh file .exe
"""

import subprocess
import sys
import os
import shutil
from pathlib import Path


def print_step(step_num, message):
    """In step v·ªõi format ƒë·∫πp."""
    print(f"\n{'='*60}")
    print(f"B∆Ø·ªöC {step_num}: {message}")
    print(f"{'='*60}\n")


def run_command(cmd, description):
    """Ch·∫°y command v·ªõi error handling."""
    print(f"‚ñ∂ {description}...")
    try:
        result = subprocess.run(
            cmd,
            shell=True,
            check=True,
            capture_output=True,
            text=True
        )
        print(f"‚úÖ {description} - Th√†nh c√¥ng!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - Th·∫•t b·∫°i!")
        print(f"Error: {e.stderr}")
        return False


def main():
    """Main build process."""
    print("\n" + "="*60)
    print("VPN CONNECTION TOOL - BUILD SCRIPT")
    print("="*60)

    # Set environment variables ƒë·ªÉ tr√°nh MemoryError v·ªõi Conda
    os.environ['PYINSTALLER_COMPILE_BOOTLOADER'] = '0'
    os.environ['PYINSTALLER_DISABLE_CONDA_SUPPORT'] = '1'
    print("\nüí° ƒê√£ set environment variables ƒë·ªÉ t·ªëi ∆∞u memory usage")
    
    # B∆∞·ªõc 1: Check dependencies
    print_step(1, "Ki·ªÉm tra dependencies")
    
    if not run_command(
        "python --version",
        "Ki·ªÉm tra Python"
    ):
        print("‚ùå Python ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t!")
        sys.exit(1)
    
    # B∆∞·ªõc 2: Install dependencies
    print_step(2, "C√†i ƒë·∫∑t dependencies")
    
    if not run_command(
        "pip install -r requirements.txt",
        "C√†i ƒë·∫∑t t·∫•t c·∫£ dependencies"
    ):
        print("‚ùå Kh√¥ng th·ªÉ c√†i dependencies!")
        sys.exit(1)
    
    # B∆∞·ªõc 3: Clean old builds
    print_step(3, "D·ªçn d·∫πp builds c≈©")
    
    dirs_to_clean = ['build', 'dist']
    for dir_name in dirs_to_clean:
        if os.path.exists(dir_name):
            print(f"‚ñ∂ X√≥a th∆∞ m·ª•c {dir_name}/...")
            shutil.rmtree(dir_name)
            print(f"‚úÖ ƒê√£ x√≥a {dir_name}/")
    
    # B∆∞·ªõc 4: Build v·ªõi PyInstaller
    print_step(4, "Build file .exe v·ªõi PyInstaller")

    # Try v·ªõi spec file tr∆∞·ªõc
    success = run_command(
        "pyinstaller vpn_tool.spec --clean",
        "Build .exe t·ª´ spec file"
    )

    # N·∫øu fail, th·ª≠ alternative method
    if not success:
        print("\n‚ö†Ô∏è Build v·ªõi spec file th·∫•t b·∫°i!")
        print("üí° ƒêang th·ª≠ alternative method (direct build)...\n")

        # Alternative: Build tr·ª±c ti·∫øp v·ªõi command line options
        alt_cmd = (
            "pyinstaller --onefile --windowed "
            "--name VPN_Connection_Tool "
            "--add-data config.yaml;. "
            "--hidden-import PyQt5.QtCore "
            "--hidden-import PyQt5.QtGui "
            "--hidden-import PyQt5.QtWidgets "
            "--hidden-import requests "
            "--hidden-import yaml "
            "--hidden-import psutil "
            "--exclude-module matplotlib "
            "--exclude-module numpy "
            "--exclude-module pandas "
            "--exclude-module scipy "
            "--exclude-module PIL "
            "--exclude-module tkinter "
            "--exclude-module IPython "
            "--exclude-module jupyter "
            "--uac-admin "
            "--clean "
            "main_gui.py"
        )

        if not run_command(alt_cmd, "Build .exe v·ªõi alternative method"):
            print("‚ùå Build th·∫•t b·∫°i v·ªõi c·∫£ 2 methods!")
            print("\nüí° G·ª£i √Ω:")
            print("   1. TƒÉng RAM available (ƒë√≥ng apps kh√°c)")
            print("   2. T·∫°o virtual environment m·ªõi v·ªõi √≠t packages h∆°n")
            print("   3. S·ª≠ d·ª•ng Python environment thay v√¨ Conda")
            sys.exit(1)

        print("‚úÖ Build th√†nh c√¥ng v·ªõi alternative method!")
    
    # B∆∞·ªõc 5: Verify output
    print_step(5, "Ki·ªÉm tra k·∫øt qu·∫£")
    
    exe_path = Path("dist/VPN_Connection_Tool.exe")
    if exe_path.exists():
        size_mb = exe_path.stat().st_size / (1024 * 1024)
        print(f"‚úÖ Build th√†nh c√¥ng!")
        print(f"\nüì¶ Th√¥ng tin file:")
        print(f"   ƒê∆∞·ªùng d·∫´n: {exe_path.absolute()}")
        print(f"   K√≠ch th∆∞·ªõc: {size_mb:.2f} MB")
        print(f"\nüí° H∆∞·ªõng d·∫´n:")
        print(f"   1. File .exe n·∫±m trong th∆∞ m·ª•c: dist/")
        print(f"   2. Chu·ªôt ph·∫£i v√†o file ‚Üí 'Run as Administrator'")
        print(f"   3. Ho·∫∑c g·ª≠i file n√†y cho ng∆∞·ªùi kh√°c, h·ªç ch·ªâ c·∫ßn ch·∫°y!")
        print(f"\n‚ö†Ô∏è L∆∞u √Ω:")
        print(f"   - File c·∫ßn quy·ªÅn Administrator ƒë·ªÉ k·∫øt n·ªëi VPN")
        print(f"   - OpenVPN v·∫´n c·∫ßn ƒë∆∞·ª£c c√†i ƒë·∫∑t tr√™n m√°y ƒë√≠ch")
    else:
        print("‚ùå Kh√¥ng t√¨m th·∫•y file .exe!")
        sys.exit(1)
    
    # B∆∞·ªõc 6: Create package
    print_step(6, "T·∫°o package ph√¢n ph·ªëi")
    
    package_dir = Path("dist/VPN_Tool_Package")
    if package_dir.exists():
        shutil.rmtree(package_dir)
    
    package_dir.mkdir(parents=True, exist_ok=True)
    
    # Copy exe
    shutil.copy2(exe_path, package_dir / "VPN_Connection_Tool.exe")
    
    # Copy config
    if Path("config.yaml").exists():
        shutil.copy2("config.yaml", package_dir / "config.yaml")
    
    # Create README
    readme_content = """# VPN Connection Tool

## C√†i ƒê·∫∑t

### Y√™u C·∫ßu:
- Windows 10/11
- OpenVPN (t·∫£i t·ª´: https://openvpn.net/community-downloads/)

### C√°ch S·ª≠ D·ª•ng:
1. C√†i ƒë·∫∑t OpenVPN (n·∫øu ch∆∞a c√≥)
2. Chu·ªôt ph·∫£i v√†o "VPN_Connection_Tool.exe"
3. Ch·ªçn "Run as Administrator"
4. Ch·ªçn qu·ªëc gia v√† click "K·∫øt N·ªëi VPN"

## L∆∞u √ù:
- B·∫Øt bu·ªôc ch·∫°y v·ªõi quy·ªÅn Administrator
- OpenVPN s·∫Ω ch·∫°y ng·∫ßm trong background
- Xem log trong ·ª©ng d·ª•ng ƒë·ªÉ bi·∫øt tr·∫°ng th√°i

## H·ªó Tr·ª£:
- Email: ntd237.work@gmail.com
- GitHub: https://github.com/ntd237
"""
    
    with open(package_dir / "README.txt", 'w', encoding='utf-8') as f:
        f.write(readme_content)
    
    print(f"‚úÖ ƒê√£ t·∫°o package t·∫°i: {package_dir.absolute()}")
    print(f"\nüì¶ N·ªôi dung package:")
    print(f"   - VPN_Connection_Tool.exe ({size_mb:.2f} MB)")
    print(f"   - config.yaml")
    print(f"   - README.txt")
    
    print("\n" + "="*60)
    print("‚úÖ BUILD HO√ÄN T·∫§T!")
    print("="*60)
    print(f"\nüì¶ Package s·∫µn s√†ng ph√¢n ph·ªëi t·∫°i:")
    print(f"   {package_dir.absolute()}")
    print(f"\nüí° C√≥ th·ªÉ zip th∆∞ m·ª•c n√†y v√† g·ª≠i cho ng∆∞·ªùi kh√°c!")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Build b·ªã h·ªßy b·ªüi ng∆∞·ªùi d√πng")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå L·ªói kh√¥ng mong ƒë·ª£i: {e}")
        sys.exit(1)
